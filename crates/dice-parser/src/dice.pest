//! A [`pest::Parser`] for a simple dice notation language.
//!
//! See [`Rule::equation`], which is the top-level rule for parsing.

/// Any space, tab, or newline.
WHITESPACE = _{ " " | "\t" | NEWLINE }

/// Parses a number, like: `1234` but not `0123`.
natural = @{ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* | ASCII_DIGIT }
/// Parses a dice string, like: `1d20` but not `1 d 30`.
dice = ${ natural ~ ^"d" ~ natural }
/// Parses a dice string, a number, or a parenthesized expression.
primary = _{ dice | natural | "(" ~ expr ~ ")" }
atom    = _{ unary_op? ~ primary ~ postfix_op? }

/// A `postfix_op` binds to the right of a [`Rule::primary`].
postfix_op = _{ label }
/// A comment, like `[ my comment here! ]`.
label      =  {
    "[" ~ label_text ~ "]"
}
label_text =  { (!"]" ~ ASCII)* } // enforce ascii-only, to avoid parsing panics

/// A `unary_op` binds to the left of a [`Rule::primary`].
unary_op    = _{ unary_minus }
/// A negation, like the `-` in `-(1+2)`.
unary_minus =  { "-" }

/// A binary operation: `+`, `-`, `*`, or `/`.
bin_op   = _{ add | subtract | multiply | divide }
add      =  { "+" }
subtract =  { "-" }
multiply =  { "*" }
divide   =  { "/" }

expr     =  { atom ~ (bin_op ~ atom)* }

/// The top-level rule for parsing. You try parsing this in most cases.
equation = _{ SOI ~ expr ~ EOI }
